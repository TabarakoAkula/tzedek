services:
  nginx:
    image: nginx:1.27.5
    container_name: nginx
    ports:
      - "8181:80"
    volumes:
      - "./nginx.conf:/etc/nginx/nginx.conf"
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      web:
        condition: service_started
      telegram_bot:
        condition: service_started
      celery-worker:
        condition: service_started
    networks:
      - django-network

  db:
    image: postgres:17
    container_name: db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_NAME}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${POSTGRES_USER}" ]
      interval: 10s
      retries: 5
      start_period: 10s
      timeout: 5s
    env_file:
     - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    expose:
      - "5432"
    networks:
      - django-network

  redis:
    image: redis:8.0.0
    container_name: redis
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      retries: 3
      start_period: 5s
      timeout: 5s
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - django-network

  web:
    build:
      context: .
      dockerfile: docker/Dockerfile.web
    container_name: web
    command: bash -c "cd web &&
                      python3 ./manage.py migrate &&
                      python3 ./manage.py collectstatic --no-input &&
                      gunicorn --config gunicorn_config.py core.wsgi:application --preload"
    expose:
      - "8000"
    restart: unless-stopped
    volumes:
      - ./web/:/code/web/
      - ./web/logs:/code/web/logs
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    links:
      - db:db
      - redis:redis
    networks:
      - django-network

  telegram_bot:
    build:
      context: .
      dockerfile: docker/Dockerfile.telegram_bot
    container_name: telegram_bot
    command: bash -c "python3 telegram_bot"
    expose:
      - "8080"
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      web:
        condition: service_started
    networks:
      - django-network

  celery-worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.web
    container_name: celery-worker
    command: bash -c "cd web &&
                      celery -A core worker --loglevel=INFO -E"
    volumes:
      - ./web/:/code/web
      - redis_data:/data
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - django-network


volumes:
  postgres_data:
  redis_data:

networks:
  django-network:
    driver: bridge
